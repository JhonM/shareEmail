{"version":3,"file":"multiple-email-form.min.js","sources":["../src/components/email-label/email-label.ts","../src/components/email-input/email-input.ts","../src/shareForm/index.ts","../src/index.ts"],"sourcesContent":["import { EmailType } from '../../types';\n\n/**\n * Validates email\n *\n * @param {string} email - email value\n */\nconst validateEmail = (email: string) => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\n\n/**\n * @param {string} email - email value\n */\nconst labelTemplate = (email: string) =>\n  `\n    <label data-share-form=\"share-box-email-label\">\n      <span  data-share-form=\"share-box-email\">${email}<span>\n      <span data-share-form=\"share-box-email-close\" tabindex=\"0\">x</span>\n    </label>\n  `;\n\n/**\n * @param {Object} props - { email, action }\n * returns Node\n */\nexport default (props: EmailType) => {\n  const template = document.createElement('div');\n  template.dataset.shareForm = 'share-box-email-label-container';\n  template.tabIndex = 0;\n  template.classList.add(validateEmail(props.email) ? 'valid' : 'invalid');\n  template.innerHTML = labelTemplate(props.email);\n\n  /**\n   * remove email label on click\n   */\n  template\n    ?.querySelector('[data-share-form=\"share-box-email-close\"]')\n    ?.addEventListener('click', () => {\n      props.action();\n    });\n\n  /**\n   * remove email label on enter\n   */\n  template.addEventListener('keydown', (e) => {\n    if (e.keyCode === 13 || e.code === 'Enter') {\n      props.action();\n    }\n  });\n\n  return template;\n};\n","import { ClipboardEvent, InputType } from '../../types';\n\n/**\n * @param {string} placeholder - placeholder value\n */\nconst labelTemplate = (placeholder: string) =>\n  `\n    <input type=\"email\" placeholder=\"${placeholder}\" multiple>\n  `;\n\n/**\n * @param {string} e - blur value\n * @param {Function} action - callback function\n */\nconst onBlur = (e: string, action: (e: string) => void) => {\n  fireAction(e, action);\n};\n\n/**\n * @param {string} e - keydown value\n * @param {Function} action - callback function\n */\nconst onKeyDown = (e: string, action: (e: string) => void) => {\n  fireAction(e, action);\n};\n\n/**\n * @param {Event} ClipboardEvent - paste event\n * @param e\n * @param {Function} action - a callback function\n */\nconst onPaste = (e: ClipboardEvent, action: (e: string) => void) => {\n  const paste = (e.clipboardData || (<any>window).clipboardData).getData(\n    'text',\n  );\n  const pasteArr = paste.split(/[\\s,]+/);\n  pasteArr.forEach((email: string) => action(email));\n};\n\n/**\n * @param {string} e - passed in value\n * @param {Function} action - callback function\n */\nconst fireAction = (e: string, action: (e: string) => void) => {\n  const newEmail = e;\n  if (newEmail === '') return;\n  action(newEmail);\n};\n\n/**\n * @param {Object} props - { placeholder, action }\n * returns Node\n */\nexport default (props: InputType) => {\n  const template = document.createElement('div');\n  template.dataset.shareForm = 'share-box-input-container';\n  template.innerHTML = labelTemplate(props.placeholder);\n\n  const input = template.querySelector('input');\n\n  /**\n   * fire action on blur\n   */\n  input?.addEventListener('blur', (e) => {\n    onBlur((<HTMLInputElement>e.target).value, props.action);\n\n    (<HTMLInputElement>e.target).value = '';\n  });\n\n  /**\n   * fire action when keypress is Comma or Enter\n   */\n  input?.addEventListener('keydown', (e) => {\n    if (\n      e.keyCode === 188 ||\n      e.keyCode === 13 ||\n      ['Comma', 'Enter'].includes(e.code)\n    ) {\n      onKeyDown((<HTMLInputElement>e.target).value, props.action);\n\n      (<HTMLInputElement>e.target).value = '';\n      // input.removeEventListener('blur', onBlur);\n    }\n  });\n\n  /**\n   * make sure to strip the comma when when typing\n   */\n  input?.addEventListener('input', function (e) {\n    const removeComma = (<HTMLInputElement>e.target).value.replace(/,/g, '');\n    (<HTMLInputElement>e.target).value = removeComma;\n  });\n\n  /**\n   * fire action when user paste a string with emails\n   */\n  input?.addEventListener('paste', (e) => {\n    onPaste(e, props.action);\n    (<HTMLInputElement>e.target).blur();\n  });\n\n  return template;\n};\n","import { Props } from '../types';\nimport { emailLabel } from '../components/email-label';\nimport { emailInput } from '../components/email-input';\n\nexport default class shareForm {\n  selector: HTMLElement;\n  list: HTMLElement;\n  props: Props;\n  emails: string[];\n\n  /**\n   * @param {HTMLElement} selector -  the selector to bind this class to\n   * @param {Array} (optional) props -  an array with object\n   * @param props\n   */\n  constructor(selector: HTMLElement, props: Props) {\n    this.selector = selector;\n    this.list = document.createElement('span');\n    this.props = props;\n    this.emails = props?.emails || [];\n\n    this.buildList();\n  }\n\n  /**\n   * Builds list based on emails array and appends this to this.selector\n   * Appends emailInput component this.selector\n   */\n  buildList() {\n    this.emails.forEach((email) => {\n      const template = emailLabel({\n        email,\n        action: () => this.removeEmail(template),\n      });\n      this.list.appendChild(template);\n    });\n\n    this.selector.appendChild(this.list);\n\n    this.selector.appendChild(\n      emailInput({\n        placeholder: 'add more people...',\n        action: (e: string) => this.addEmail(e),\n      }),\n    );\n  }\n\n  /**\n   * @param {string} email - adds an email to appendChildEmail\n   */\n  addEmail(email: string) {\n    this.appendChildEmail(email);\n  }\n\n  /**\n   * Adds a random email to appendChildEmail\n   */\n  randomEmail() {\n    const emailArray = [\n      'push@push.it',\n      'peter@doe.com',\n      'linda@doe.ru',\n      'lisa.pater@doe.com',\n      'floor@longurl.it',\n      'jan@longurl.com',\n      'robert@longurl.ru',\n      'britt.pater@longurl.com',\n    ];\n    const randomEmail =\n      emailArray[Math.floor(Math.random() * emailArray.length)];\n\n    this.appendChildEmail(randomEmail);\n  }\n\n  /**\n   * @param {string} email - removes an email from this.list\n   */\n  removeEmail(email: HTMLElement) {\n    this.list.removeChild(email);\n  }\n\n  /**\n   * @param {string} email - adds an email to emailLabel components and append this to this.list\n   */\n  appendChildEmail(email: string) {\n    const template = emailLabel({\n      email,\n      action: () => this.removeEmail(template),\n    });\n    this.list.appendChild(template);\n  }\n\n  /**\n   * Gets length from this.list\n   */\n  emailsCount() {\n    const currentLength = this.list.querySelectorAll(\n      '[data-share-form=\"share-box-email-label-container\"]',\n    ).length;\n    alert(`Current email count is: ${currentLength}`);\n  }\n}\n","import './css/index.scss';\nimport ShareForm from './shareForm';\nimport { Props } from './types';\n\nexport const setup = (selector: HTMLElement, props: Props) =>\n  new ShareForm(selector, props);\n"],"names":["props","template","document","createElement","email","dataset","shareForm","tabIndex","classList","add","test","String","toLowerCase","innerHTML","labelTemplate","querySelector","addEventListener","action","e","keyCode","code","fireAction","placeholder","input","onBlur","target","value","includes","onKeyDown","removeComma","replace","clipboardData","window","getData","split","forEach","onPaste","blur","constructor","selector","list","emails","buildList","emailLabel","this","removeEmail","appendChild","emailInput","addEmail","appendChildEmail","randomEmail","emailArray","Math","floor","random","length","removeChild","emailsCount","currentLength","querySelectorAll","alert","ShareForm"],"mappings":"uPA2BgBA,gBACRC,EAAWC,SAASC,cAAc,OArBnBC,IAAAA,SAsBrBH,EAASI,QAAQC,UAAY,kCAC7BL,EAASM,SAAW,EACpBN,EAASO,UAAUC,KAxBEL,EAwBgBJ,EAAMI,MAvBhC,wJACDM,KAAKC,OAAOP,GAAOQ,eAsBuB,QAAU,YAC9DX,EAASY,UAjBYT,CAAAA,4GAG0BA,uGAc1BU,CAAcd,EAAMI,iBAKzCH,MAAAA,SAAAA,EACIc,cAAc,6DACdC,iBAAiB,SAAS,KAC1BhB,EAAMiB,YAMVhB,EAASe,iBAAiB,WAAYE,IAClB,KAAdA,EAAEC,SAA6B,UAAXD,EAAEE,MACxBpB,EAAMiB,YAIHhB,GC/CT,MAsCMoB,EAAa,CAACH,EAAWD,KAEZ,KADAC,GAEjBD,EAFiBC,UASHlB,UACRC,EAAWC,SAASC,cAAc,OACxCF,EAASI,QAAQC,UAAY,4BAC7BL,EAASY,oDAA0Bb,EAAMsB,mCAEnCC,EAAQtB,EAASc,cAAc,gBAKrCQ,MAAAA,GAAAA,EAAOP,iBAAiB,QAASE,IAjDpB,EAACA,EAAWD,KACzBI,EAAWH,EAAGD,IAiDZO,CAA0BN,EAAEO,OAAQC,MAAO1B,EAAMiB,QAE9BC,EAAEO,OAAQC,MAAQ,MAMvCH,MAAAA,GAAAA,EAAOP,iBAAiB,WAAYE,KAElB,MAAdA,EAAEC,SACY,KAAdD,EAAEC,SACF,CAAC,QAAS,SAASQ,SAAST,EAAEE,SAtDlB,EAACF,EAAWD,KAC5BI,EAAWH,EAAGD,IAuDVW,CAA6BV,EAAEO,OAAQC,MAAO1B,EAAMiB,QAEjCC,EAAEO,OAAQC,MAAQ,OAQzCH,MAAAA,GAAAA,EAAOP,iBAAiB,SAAS,SAAUE,SACnCW,EAAiCX,EAAEO,OAAQC,MAAMI,QAAQ,KAAM,IAClDZ,EAAEO,OAAQC,MAAQG,KAMvCN,MAAAA,GAAAA,EAAOP,iBAAiB,SAAUE,IAjEpB,EAACA,EAAmBD,MACnBC,EAAEa,eAAuBC,OAAQD,eAAeE,QAC7D,QAEqBC,MAAM,UACpBC,SAAS/B,GAAkBa,EAAOb,MA6DzCgC,CAAQlB,EAAGlB,EAAMiB,QACEC,EAAEO,OAAQY,UAGxBpC,SCjGYK,EAWnBgC,YAAYC,EAAuBvC,QAC5BuC,SAAWA,OACXC,KAAOtC,SAASC,cAAc,aAC9BH,MAAQA,OACRyC,QAASzC,MAAAA,SAAAA,EAAOyC,SAAU,QAE1BC,YAOPA,iBACOD,OAAON,SAAS/B,UACbH,EAAW0C,EAAW,CAC1BvC,MAAAA,EACAa,OAAQ,IAAM2B,KAAKC,YAAY5C,UAE5BuC,KAAKM,YAAY7C,WAGnBsC,SAASO,YAAYF,KAAKJ,WAE1BD,SAASO,YACZC,EAAW,CACTzB,YAAa,qBACbL,OAASC,GAAc0B,KAAKI,SAAS9B,MAQ3C8B,SAAS5C,QACF6C,iBAAiB7C,GAMxB8C,oBACQC,EAAa,CACjB,eACA,gBACA,eACA,qBACA,mBACA,kBACA,oBACA,2BAEID,EACJC,EAAWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAWI,cAE9CN,iBAAiBC,GAMxBL,YAAYzC,QACLoC,KAAKgB,YAAYpD,GAMxB6C,iBAAiB7C,SACTH,EAAW0C,EAAW,CAC1BvC,MAAAA,EACAa,OAAQ,IAAM2B,KAAKC,YAAY5C,UAE5BuC,KAAKM,YAAY7C,GAMxBwD,oBACQC,EAAgBd,KAAKJ,KAAKmB,iBAC9B,uDACAJ,OACFK,iCAAiCF,cC/FhB,CAACnB,EAAuBvC,IAC3C,IAAI6D,EAAUtB,EAAUvC"}